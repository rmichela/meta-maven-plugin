package {{packageName}};

import org.apache.maven.execution.MavenSession;
import org.apache.maven.model.Plugin;
import org.apache.maven.model.PluginExecution;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.BuildPluginManager;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.plugins.annotations.ResolutionScope;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.util.xml.Xpp3Dom;
import org.codehaus.plexus.util.xml.Xpp3DomUtils;
import org.twdata.maven.mojoexecutor.MojoExecutor;

import javax.inject.Inject;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.Optional;

import static org.twdata.maven.mojoexecutor.MojoExecutor.*;

@Mojo(name = "{{goalName}}", defaultPhase = {{defaultPhase}}, threadSafe = {{threadSafe}}, requiresDependencyResolution = ResolutionScope.COMPILE)
public class {{className}} extends AbstractMojo {
    @Inject
    private BuildPluginManager pluginManager;

    @Parameter(defaultValue = "${session}", readonly = true, required = true)
    @SuppressWarnings({"unused"})
    private MavenSession mavenSession;

    @Parameter(defaultValue = "${project}", readonly = true, required = true)
    @SuppressWarnings({"unused"})
    private MavenProject project;

{{#parameters}}
    @org.apache.maven.plugins.annotations.Parameter(alias = "{{alias}}", defaultValue = "{{defaultValue}}", property = "{{property}}", readonly = {{readonly}}, required = {{required}})
    @SuppressWarnings({"unused"})
    private String {{name}};
{{/parameters}}

    // Base64 encoded Plugin objects, serialized with Java object serialization. Gross, but it works.
    private final List<String> encodedPlugins = new ArrayList<String>() { {
{{#encodedPlugins}}
        add("{{{.}}}");
{{/encodedPlugins}}
    } };

    @Override
    public void execute() throws MojoExecutionException {
        ExecutionEnvironment env = executionEnvironment(project, mavenSession, pluginManager);
        for (Plugin plugin : deserializePlugins(encodedPlugins)) {
            Xpp3Dom pluginConfiguration = Optional.ofNullable(plugin.getConfiguration()).map(Xpp3Dom.class::cast).orElse(new Xpp3Dom("configuration"));
            for (PluginExecution execution : plugin.getExecutions()) {
                Xpp3Dom executionConfiguration = Optional.ofNullable(execution.getConfiguration()).map(Xpp3Dom.class::cast).orElse(new Xpp3Dom("configuration"));
                for (String goal : execution.getGoals()) {
                    getLog().info("Executing plugin: " + plugin.getGroupId() + ":" + plugin.getArtifactId() + ":" + plugin.getVersion() + " Goal:" + goal);
                    executeMojo(
                        plugin,
                        goal,
                        Xpp3DomUtils.mergeXpp3Dom(executionConfiguration, pluginConfiguration),
                        env);
                }
            }
        }
    }

    private static List<Plugin> deserializePlugins(List<String> encodedPlugins) throws MojoExecutionException {
        List<Plugin> plugins = new ArrayList<>();
        for (String encodedPlugin : encodedPlugins) {
            try {
                Plugin plugin = deserializeFromBase64(encodedPlugin, Plugin.class);
                plugins.add(plugin);
            } catch (IOException | ClassNotFoundException e) {
                throw new MojoExecutionException("Failed to deserialize plugin", e);
            }
        }
        return plugins;
    }

    // Deserialize an object from a Base64 string
    private static <T> T deserializeFromBase64(String base64, Class<T> clazz) throws IOException, ClassNotFoundException {
        byte[] data = Base64.getDecoder().decode(base64);
        try (ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(data);
             ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream)) {
            return clazz.cast(objectInputStream.readObject());
        }
    }
}