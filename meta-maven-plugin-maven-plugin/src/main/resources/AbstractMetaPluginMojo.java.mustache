package {{packageName}};

import org.apache.maven.execution.MavenSession;
import org.apache.maven.model.Model;
import org.apache.maven.model.Plugin;
import org.apache.maven.model.PluginExecution;
import org.apache.maven.model.building.DefaultModelBuildingRequest;
import org.apache.maven.model.building.ModelBuildingRequest;
import org.apache.maven.model.building.ModelProblemCollector;
import org.apache.maven.model.building.ModelProblemCollectorRequest;
import org.apache.maven.model.interpolation.ModelInterpolator;
import org.apache.maven.model.io.ModelReader;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.BuildPluginManager;
import org.apache.maven.plugin.MojoExecution;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.descriptor.MojoDescriptor;
import org.apache.maven.plugin.descriptor.PluginDescriptor;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.plugins.annotations.ResolutionScope;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.util.xml.Xpp3Dom;
import org.codehaus.plexus.util.xml.Xpp3DomUtils;
import org.twdata.maven.mojoexecutor.MavenCompatibilityHelper;
import org.twdata.maven.mojoexecutor.MojoExecutor;

import javax.inject.Inject;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.Optional;
import java.util.Properties;

import static org.twdata.maven.mojoexecutor.MojoExecutor.*;

public abstract class AbstractMetaPluginMojo extends AbstractMojo {
    private String phase;

    protected AbstractMetaPluginMojo(String phase) {
        this.phase = phase;
    }

    @Inject
    private MojoExecution mojoExecution;

    @Inject
    private BuildPluginManager pluginManager;

    @Inject
    private ModelReader modelReader;

    @Inject
    private ModelInterpolator interpolator;

    @Parameter(defaultValue = "${session}", readonly = true, required = true)
    @SuppressWarnings({"unused"})
    private MavenSession mavenSession;

    @Parameter(defaultValue = "${project}", readonly = true, required = true)
    @SuppressWarnings({"unused"})
    private MavenProject project;

    private static final String MODEL = """{{{pluginConfiguration}}}
    """;

{{#parameters}}
    @org.apache.maven.plugins.annotations.Parameter(alias = "{{alias}}", defaultValue = "{{defaultValue}}", property = "{{property}}", readonly = {{readonly}}, required = {{required}})
    @SuppressWarnings({"unused"})
    private Object {{name}};
{{/parameters}}

    @Override
    public void execute() throws MojoExecutionException {
        try {
            ExecutionEnvironment env = executionEnvironment(project, mavenSession, pluginManager);
            for (Plugin plugin : deserializePlugins()) {
                PluginDescriptor pluginDescriptor = MavenCompatibilityHelper.loadPluginDescriptor(plugin, env, mavenSession);
                Xpp3Dom pluginConfiguration = Optional.ofNullable(plugin.getConfiguration()).map(Xpp3Dom.class::cast).orElse(new Xpp3Dom("configuration"));

                mojoExecution.getPlugin().getDependencies().stream()
                        .filter(dependency -> plugin.getGroupId().equals(dependency.getGroupId()) && plugin.getArtifactId().equals(dependency.getArtifactId()))
                        .findFirst()
                        .ifPresent(dependency -> {
                            plugin.setVersion(dependency.getVersion());
                        });

                for (PluginExecution execution : plugin.getExecutions()) {
                    Xpp3Dom executionConfiguration = Optional.ofNullable(execution.getConfiguration()).map(Xpp3Dom.class::cast).orElse(new Xpp3Dom("configuration"));
                    for (String goal : execution.getGoals()) {
                        MojoDescriptor mojo = pluginDescriptor.getMojo(goal);
                        String goalPhase = execution.getPhase() == null ? mojo.getPhase() : execution.getPhase();
                        if (phase.equals(goalPhase)) {
                            getLog().info("Executing plugin: " + plugin.getGroupId() + ":" + plugin.getArtifactId() + ":" + plugin.getVersion() + ":" + goal + "(" + execution.getId() + ")");
                            executeMojo(
                                    plugin,
                                    goal + "#" + execution.getId(),
                                    Xpp3DomUtils.mergeXpp3Dom(executionConfiguration, pluginConfiguration),
                                    env);
                        }
                    }
                }
            }
        } catch (Exception e) {
            throw new MojoExecutionException(e.getMessage(), e);
        }
    }

    private List<Plugin> deserializePlugins() throws MojoExecutionException {
        try {
            Properties parameters = new Properties();
{{#parameters}}
            parameters.put("{{name}}", {{name}}.toString());
{{/parameters}}

            Model model = modelReader.read(new StringReader(MODEL), null);

            ModelBuildingRequest request = new DefaultModelBuildingRequest()
                    .setProcessPlugins(true)
                    .setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_STRICT)
                    .setSystemProperties(System.getProperties())
                    .setUserProperties(parameters);

            ModelProblemCollector collector = new ModelProblemCollector() {
                @Override
                public void add(ModelProblemCollectorRequest req) {
                    getLog().error(req.getMessage(), req.getException());
                }
            };
            model = interpolator.interpolateModel(model, null, request, collector);
            return model.getBuild().getPlugins();
        } catch (IOException e) {
            throw new MojoExecutionException("Failed to parse embedded plugin model:" + e.getMessage(), e);
        }
    }
}