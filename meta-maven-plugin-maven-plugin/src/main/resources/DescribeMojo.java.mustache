package meta_maven_plugin.demo_meta_maven_plugin;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.ResolutionScope;

import java.util.ArrayList;
import java.util.List;

/**
* Print out the embedded meta-plugin configuration and associated parameters.
*/
@Mojo(name = "describe", requiresProject = false, threadSafe = true)
public class DescribeMojo extends AbstractMojo {
    private static final String MODEL = """{{{pluginConfiguration}}}
    """;

    private class Parameter {
        private String name;
        private String alias;
        private String property;
        private String defaultValue;
        private boolean required;
        private boolean readonly;

        public Parameter(String name, String alias, String property, String defaultValue, boolean required, boolean readonly) {
            this.name = name;
            this.alias = alias;
            this.property = property;
            this.defaultValue = defaultValue.replace("@{", "${");
            this.required = required;
            this.readonly = readonly;
        }
    }

    private List<Parameter> parameters = new ArrayList<>();

    public DescribeMojo() {
{{#parameters}}
        parameters.add(new Parameter("{{name}}", "{{alias}}", "{{property}}", "{{defaultValue}}", {{required}}, {{readonly}}));
{{/parameters}}
    }

    @Override
    public void execute() throws MojoExecutionException, MojoFailureException {
        getLog().info("------------------ Embedded meta-plugin configuration ------------------");
        for(String line : MODEL.split("\n")) {
            getLog().info(line);
        }
        getLog().info("------------------ Embedded meta-plugin parameters ---------------------");
        for (Parameter parameter : parameters) {
            getLog().info(parameter.name);
            if (!parameter.alias.isBlank()) getLog().info("    alias: " + parameter.alias);
            if (!parameter.property.isBlank()) getLog().info("    property: " + parameter.property);
            if (!parameter.defaultValue.isBlank()) getLog().info("    defaultValue: " + parameter.defaultValue);
            getLog().info("    required: " + parameter.required);
            getLog().info("    readonly: " + parameter.readonly);
        }
    }
}